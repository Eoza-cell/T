const makeWASocket = require('@whiskeysockets/baileys').default;
const { useMultiFileAuthState, DisconnectReason, Browsers } = require('@whiskeysockets/baileys');
const QRCode = require('qrcode');
const qrcodeTerminal = require('qrcode-terminal');
const pino = require('pino');
const fs = require('fs-extra');
const path = require('path');
const { handleIncomingMessage } = require('./messageHandler');
const { startEnergyRegeneration } = require('../game/energySystem');

async function startBot() {
  const { state, saveCreds } = await useMultiFileAuthState('./auth_info');

  const sock = makeWASocket({
    auth: state,
    logger: pino({ level: 'silent' }),
    printQRInTerminal: false,
    browser: ['Ubuntu', 'Chrome', '128.0.6613.86'],
    version: [2, 3000, 1025190524], 
    getMessage: async key => {
        console.log('‚ö†Ô∏è Message non d√©chiffr√©, retry demand√©:', key);
        return { conversation: 'üîÑ R√©essaye d\'envoyer ton message' };
    }
  });

  sock.ev.on('creds.update', saveCreds);

  sock.ev.on('connection.update', async (update) => {
    const { connection, lastDisconnect, qr } = update;

    if (qr) {
      console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
      console.log('‚ïë   üîê QR CODE WHATSAPP DISPONIBLE     ‚ïë');
      console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');
      
      try {
        // Affichage dans le terminal
        qrcodeTerminal.generate(qr, { small: true }, (qrcode) => {
          console.log(qrcode);
        });
        
        // Sauvegarde en fichier PNG (TOUJOURS mis √† jour)
        const qrPath = path.join(__dirname, '../../qr-code.png');
        
        // Supprimer l'ancien QR code s'il existe
        if (await fs.pathExists(qrPath)) {
          await fs.remove(qrPath);
        }
        
        // Cr√©er le nouveau QR code
        await QRCode.toFile(qrPath, qr, {
          errorCorrectionLevel: 'H',
          type: 'png',
          quality: 0.95,
          margin: 1,
          width: 512
        });
        
        const timestamp = new Date().toLocaleTimeString('fr-FR');
        console.log(`\nüì± QR Code mis √† jour: ${timestamp}`);
        console.log('üí° Le fichier qr-code.png a √©t√© actualis√©');
        console.log('üåê Rafra√Æchis la page web pour voir le nouveau QR\n');
      } catch (err) {
        console.error('‚ùå Erreur lors de la cr√©ation du QR code:', err);
      }
    }

    if (connection === 'close') {
      const shouldReconnect = lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut;
      const statusCode = lastDisconnect?.error?.output?.statusCode;
      
      console.log('\n‚ùå Connexion ferm√©e');
      console.log('üìä Code:', statusCode);
      console.log('üìù Raison:', lastDisconnect?.error?.message);
      
      // Erreur 405 = WhatsApp bloque les connexions cloud
      if (statusCode === 405) {
        console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
        console.log('‚ïë  ‚ö†Ô∏è  ERREUR 405: WhatsApp bloque Replit           ‚ïë');
        console.log('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£');
        console.log('‚ïë  WhatsApp refuse les connexions depuis les        ‚ïë');
        console.log('‚ïë  serveurs cloud comme Replit.                      ‚ïë');
        console.log('‚ïë                                                    ‚ïë');
        console.log('‚ïë  üí° SOLUTIONS:                                     ‚ïë');
        console.log('‚ïë  1. T√©l√©charge le code et ex√©cute-le localement   ‚ïë');
        console.log('‚ïë  2. D√©ploie sur un VPS personnel                  ‚ïë');
        console.log('‚ïë  3. Utilise l\'option SSH de Replit (voir docs)    ‚ïë');
        console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');
      }
      
      if (shouldReconnect && statusCode !== 405) {
        console.log('üîÑ Reconnexion dans 5 secondes...');
        setTimeout(() => startBot(), 5000);
      } else if (statusCode === 405) {
        console.log('üõë Arr√™t des tentatives de reconnexion (erreur 405)');
      } else {
        console.log('üö™ D√©connect√©. Relance le bot pour te reconnecter.');
      }
    } else if (connection === 'open') {
      console.log('‚úÖ Bot connect√© √† WhatsApp !');
      console.log('üè¥‚Äç‚ò†Ô∏è Bot One Piece RPG op√©rationnel !');
      console.log('\nüì± Envoie "!aide" sur WhatsApp pour commencer\n');
    }
  });

  sock.ev.on('messages.upsert', async ({ messages, type }) => {
    if (type !== 'notify') return;

    for (const message of messages) {
      if (!message.message) continue;
      if (message.key.fromMe) continue;

      await handleIncomingMessage(sock, message);
    }
  });

  startEnergyRegeneration();

  console.log('‚ö° Syst√®me d\'√©nergie activ√©');
}

module.exports = {
  startBot
};
